<?php

/**
 * @file
 * Primary module hooks for foia_annual_data_report module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\AlertCommand;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;
use Drupal\Core\Ajax\RedirectCommand;

/**
 * Implements hook_form_form_id_alter().
 */
function foia_annual_data_report_form_node_annual_foia_report_data_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add the AJAX save callbacks.
  foia_annual_data_report_ajax_existing_node($form);

  // Force a submit function to increase memory limit before core's submit.
  foreach (array_keys($form['actions']) as $action) {
    if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
      array_unshift($form['actions'][$action]['#submit'], 'foia_annual_data_report_early_submit');
    }
  }

}

/**
 * Implements hook_form_form_id_alter().
 */
function foia_annual_data_report_form_node_annual_foia_report_data_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  foia_annual_data_report_ajax_new_node($form);
}

/**
 * Add ajax to a new annual report node to submit on agency field is set.
 *
 * @param array $form
 *   Form array passed from hook_form_form_id_alter().
 */
function foia_annual_data_report_ajax_new_node(array &$form) {

  $form['field_agency']['widget'][0]['target_id']['#ajax'] = [
    'callback' => 'foia_annual_data_report_create_node',
    'event' => 'change',
    'progress' => [
      'type' => 'throbber',
      'message' => 'Please Wait...',
    ],
  ];

}

/**
 * Add ajax to a existing annual report node to submit on agency field is set.
 *
 * @param array $form
 *   Form array passed from hook_form_form_id_alter().
 */
function foia_annual_data_report_ajax_existing_node(array &$form) {

  $form['field_agency']['widget'][0]['target_id']['#ajax'] = [
    'callback' => 'foia_annual_data_report_refresh',
    'event' => 'change',
    'progress' => [
      'type' => 'throbber',
      'message' => 'Please Wait...',
    ],
  ];

}

/**
 * Save the node and redirect back to the edit page for the node.
 *
 * @param array $form
 *   Form array passed from hook_form_form_id_alter().
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state passed from hook_form_form_id_alter().
 *
 * @return \Drupal\Core\Ajax\AjaxResponse
 *   AjaxResponse object to alert user and redirect them.
 */
function foia_annual_data_report_create_node(array $form, FormStateInterface
 $form_state) {

  $response = new AjaxResponse();

  // Set a temporary title, in case they have not.
  $report_title = $form_state->getValue('title')[0]['value'] ?
  $form_state->getValue('title')[0]['value'] :
  'Agency Report ' . date('Y-m-d');

  $node = \Drupal::entityTypeManager()->getStorage('node')->create([
    'type' => 'annual_foia_report_data',
    'title' => $report_title,
    'field_agency' => $form_state->getValue('field_agency'),
  ]);
  $node->save();

  $url = $node->toUrl('edit-form')->toString();

  $response->addCommand(new RedirectCommand($url));
  $response->addCommand(new AlertCommand("Please wait while the page refreshes"));

  return $response;
}

/**
 * Do all the magic to get the component list and update the Component options.
 *
 * @param array $form
 *   Form array passed from hook_form_form_id_alter().
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state passed from hook_form_form_id_alter().
 */
function foia_annual_data_report_refresh(array $form, FormStateInterface
 $form_state) {

  $node = \Drupal::routeMatch()->getParameter('node');
  $response = new AjaxResponse();
  $currentURL = Url::fromRoute('<current>');

  if ($node instanceof NodeInterface) {
    $nid = $node->id();
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

    // @todo: If users change anything else it doesnt persist.
    $node->set('field_agency', $form_state->getValue('field_agency'));

    // Set as new revision.
    $node->setNewRevision(TRUE);
    $node->revision_log = 'Updated Agency for report';
    $node->setRevisionUserId(\Drupal::currentUser()->id());

    $node->save();

    $response->addCommand(new RedirectCommand($currentURL->toString()));
    $response->addCommand(new AlertCommand("Please wait while the page refreshes"));
  }

  return $response;
}

/**
 * Implements hook_form_submit().
 *
 * Set the memory limit to 1024M. Should only be used on Annual Report forms.
 */
function foia_annual_data_report_early_submit($form, FormStateInterface $form_state) {
  foia_annual_data_report_debug_log('Submitting Annual Report. Before setting memory');
  foia_annual_data_report_set_memory_limit();
  foia_annual_data_report_debug_log('Submitting Annual Report. After setting memory');

}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function foia_annual_data_report_node_load($entities) {
  // If there is an Annual Report being loaded and memory is not what we want
  // then set it.
  if (ini_get('memory_limit') !== foia_annual_data_report_get_config('annual_report_memory_limit')) {
    foreach ($entities as $entity) {
      if ($entity->bundle() === 'annual_foia_report_data') {

        foia_annual_data_report_debug_log('Loading Annual Report. Before setting memory');
        foia_annual_data_report_set_memory_limit();
        foia_annual_data_report_debug_log('Loading Annual Report. After setting memory');

        // If we already set the memory limit, break out of the array.
        break;
      }
    }
  }
}

/**
 * Set memory limit for override based on config.
 */
function foia_annual_data_report_set_memory_limit() {
  try {
    $config_value = foia_annual_data_report_get_config('annual_report_memory_limit');
  }
  catch (\InvalidArgumentException $e) {
    \Drupal::logger('foia_annual_data_report')->error('Invalid setting requested.');
  }

  if ($config_value) {
    ini_set('memory_limit', $config_value);
  }
}

/**
 * Get the requested setting from this module's config.
 *
 * @param string $setting
 *   The name of the setting to be retrieved.
 *
 * @return string
 *   The value of the requested setting.
 */
function foia_annual_data_report_get_config(string $setting) {
  if (!in_array($setting, ['annual_report_memory_limit', 'debug_annual_report_memory_limit'])) {
    throw new \InvalidArgumentException('Invalid setting.');
  }
  $value = \Drupal::config('foia_annual_data_report.settings')
    ->get($setting);

  return $value;
}

/**
 * Log debugging output if config value is set.
 *
 * @param string $message_base
 *   Base text to prepend to memory_limit when writing debugging message.
 */
function foia_annual_data_report_debug_log(string $message_base) {
  $debug = foia_annual_data_report_get_config('debug_annual_report_memory_limit');

  if ($debug) {

    $msg = $message_base . ': ' . ini_get('memory_limit');

    \Drupal::logger('foia_annual_data_report')->debug($msg);
  }
}
